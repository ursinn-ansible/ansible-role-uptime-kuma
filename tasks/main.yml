---
- name: set vars
  set_fact:
    docker_image: '{{ role_uptime_kuma_image }}'
    docker_container: '{{ role_uptime_kuma_container }}'
    docker_volume: '{{ role_uptime_kuma_volume }}_data'
    docker_network: '{{ role_uptime_kuma_network }}'

- name: Ensure image is pulled
  community.docker.docker_image:
    name: "{{ docker_image }}"
    source: pull
    force_source: yes
  register: pulled

- name: Remove container
  community.docker.docker_container:
    name: "{{ docker_container }}"
    state: absent
  when: pulled.changed

- name: Get infos on container
  community.docker.docker_container_info:
    name: "{{ docker_container }}"
  register: result

- name: Create volume
  community.docker.docker_volume:
    name: "{{ docker_volume }}"

- name: Create network
  community.docker.docker_network:
    name: "{{ docker_network }}"
    driver_options:
          com.docker.network.bridge.name: "br-{{ docker_network }}"
  when:
    role_uptime_kuma_cloudflared_token == ""

- name: Create uptime-kuma container
  community.docker.docker_container:
    image: "{{ docker_image }}"
    volumes:
     - '{{ docker_volume }}:/app/data:Z'
    name: "{{ docker_container }}"
    networks:
     - name: "{{ docker_network }}"
    restart_policy: unless-stopped
    state: started
  when:
    (pulled.changed or result.exists == false) and role_uptime_kuma_cloudflared_token == ""

- name: Create uptime-kuma container with cf reverse proxy
  community.docker.docker_container:
    image: "{{ docker_image }}"
    volumes:
     - '{{ docker_volume }}:/app/data:Z'
    name: "{{ docker_container }}"
    env:
      UPTIME_KUMA_CLOUDFLARED_TOKEN: "{{ role_uptime_kuma_cloudflared_token }}"
    restart_policy: unless-stopped
    state: started
  when:
    (pulled.changed or result.exists == false) and role_uptime_kuma_cloudflared_token != ""
